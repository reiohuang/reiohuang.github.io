[{"content":"引入 1 2 3 4 本文總瀏覽數 `\u0026lt;span id=\u0026#34;busuanzi_value_page_pv\u0026#34;\u0026gt;\u0026lt;/span\u0026gt;` 次 本文總訪客數 `\u0026lt;span id=\u0026#34;busuanzi_value_page_uv\u0026#34;\u0026gt;\u0026lt;/span\u0026gt;` 人 本站總瀏覽數 `\u0026lt;span id=\u0026#34;busuanzi_value_site_pv\u0026#34;\u0026gt;\u0026lt;/span\u0026gt;` 次 本站總訪客數 `\u0026lt;span id=\u0026#34;busuanzi_value_site_uv\u0026#34;\u0026gt;\u0026lt;/span\u0026gt;` 人 新增本站總瀏覽數 widget 新增 vistor-views.html Layout 以 Stack 為例，預計將訪問人數(VISTOR VIEWS) 放置在首頁右側下方，屬 widget 元件區域。在 VSCode widget 資料夾內新增 vistor-views.html 檔案。\n路徑： themes/hugo-theme-stack/layouts/partials/widget\nvistor-views.html 檔案內添加以下程式碼\n1 2 3 4 5 6 7 \u0026lt;!-- busuanzi --\u0026gt; \u0026lt;section class=\u0026#34;widget\u0026#34;\u0026gt; \u0026lt;h2 class=\u0026#34;section-title\u0026#34;\u0026gt;VISTOR VIEWS\u0026lt;/h2\u0026gt; \u0026lt;span id=\u0026#34;busuanzi_container_site_pv\u0026#34; style=\u0026#34;color: skyblue; display: inline; font-size: 24px;\u0026#34;\u0026gt; \u0026lt;span id=\u0026#34;busuanzi_value_site_pv\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;/span\u0026gt; \u0026lt;/section\u0026gt; Config 新增 vistor-views 欄位 在 config.yaml 檔中加上 vistor-views\n1 2 3 4 params: widgets: homepage: - type: vistor-views Head 路徑： themes/hugo-theme-stack/layouts/partials/head/head.html\nhead 檔案內添加以下程式碼\n1 2 3 4 5 \u0026lt;!-- busuanzi --\u0026gt; {{- if .Site.Params.busuanzi.enable -}} \u0026lt;script async src=\u0026#34;//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;meta name=\u0026#34;referrer\u0026#34; content=\u0026#34;no-referrer-when-downgrade\u0026#34;\u0026gt; {{- end -}} 加在檔案最後面\n啟用不蒜子 Busuanzi 回到 config.yaml 檔中加上 busuanzi 啟用\n1 2 3 params: busuanzi: enable: true 效果 單篇文章加入瀏覽次數 路徑： themes/hugo-theme-stack/layouts/partials/article/components/details.html\n添加以下程式碼\n1 \u0026lt;span id=\u0026#34;busuanzi_value_page_pv\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; 效果 參考連結 Hugo添加不蒜子Busuanzi站點訪問量與閱讀量統計 Hugo加入留言、觀看人數 添加網站、網頁流量統計 ","date":"2022-09-18T09:53:50+08:00","image":"https://images.unsplash.com/photo-1517732306149-e8f829eb588a?ixlib=rb-1.2.1\u0026ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8\u0026auto=format\u0026fit=crop\u0026w=1172\u0026q=80","permalink":"https://reiohuang.github.io/2022/09/vistor-views/","title":"Hugo 使用不蒜子 Busuanzi 加入瀏覽數"},{"content":"在 Mac 上使用 Hugo 運行個人網站 先安裝 Homebrew，再透過 Homebrew 安裝 hugo brew install hugo。\n1 brew install hugo CaiJimmy/hugo-theme-stack: Card-style Hugo theme designed for bloggers Stack | Hugo Themes (gohugo.io) Duran 的速寫筆記 (duranhsieh.com) 下載 Stack 主題，解壓縮後：\n在 exampleSite 裡新建資料夾 themes 將 exampleSite 資料夾拉出來放外層 去掉 master，將 hugo-theme-stack-master 改名為 hugo-theme-stack 放入 themes 中。 在終端機，於 exampleSite 資料夾路徑下輸入 hugo server 運行網站 出現 http://localhost:1313/ 時，表示個人網站已經成功運行起來，將這行網址貼到瀏覽器，就會發現 Stack 這個主題的個人網站，已經成功在電腦上執行。\n[!note] 如果無法執行，可用無痕視窗開啟\nConfig 參數設定 Config 格式若為 toml 檔時，使用 VSCode 安裝 TOML 插件。 基本參數 修改 config.yaml 檔中的預設參數設定\nbaseURL 網站網址 paginate 分頁連結，每頁顯示文章數。 title 網站標籤 在終端機上輸入 hugo server 將網站運行起來，可以看到標籤已經變成 Reno\u0026rsquo;s Blog。 permalinks 自訂每篇文章的網址： 在每篇文章裡加 slug，會用自定義的 fish-shell 作為網址。\n.yaml 中的設定\nSite creation time 站點建立時間 social site 社交網站的連結設定\n新增文章 1 hugo new post/fish-shell.md 會在 /content/post 資料夾中建立 fish-shell.md。\n分類文章、為文章加上標籤 頭字段(Front Matter) line1~13 是 hugo 的文章設定，新建立的文章最前面都需貼上 Fron Matter 設定。 Hugo Content - Front Matter\ntitle: 文章標題 description: 負標題，這篇文章的簡短介紹。 date: 撰寫日期，Hugo 預設會把最新的文章放在最前面。 draft: 可以指定這篇文章是不是草稿，Hugo 不會把標註為草稿(true)的文章顯示在網站上。 image: 標題圖片 pinned = true: 文章置頂\nline6~11: 可為文章進行分類(categories)，以及加上標籤(tags)。\n部署到 Github Pages cd 到 Hugo 專案底下，執行 hugo 指令，打包 Hugo Site。\n回到 Finder 上，會發現在 example Site 裡面多了一個 public 的資料夾，就是 Hugo 新產生出來的個人網站的程式碼。\n複製 public 裡面全部的檔案跟資料夾放到==本地端== reiohuang.github.io 資料夾的 repository 裡，最後再把它上傳到遠端 Github 的 reiohuang.github.io 資料夾上。\ngit 初始化本地端 reiohuang.github.io 資料夾準備與遠端的 repository 綁定：\n1 2 3 git init git add . git ci -m \u0026#39;my first commit\u0026#39; 在 Github 中點擊 New repository，創建一個新的 repository。如果要使用 Github Pages 來架設個人網站，repository 的名字有命名規則，Github 帳號.github.io。\n若使用 token 連接遠端時，需切換到 HTTPS\nGithub 在 2021/08/13 時，做了一次安全性更新，將密碼認證移除了。所以當本地 push 到遠端時，出現了以下提示訊息，表示需要重新調整設定，以 token 取代密碼，設定方式請參照 [[GitHub 改版使用個人令牌(token)]]。\n本地端的資料夾與遠端儲存庫綁定，並 push 資料到 GitHub 遠端，Password 請輸入申請的 token。\n成功上傳到 GitHub\n開啟瀏覽器，網址列輸入 reiohuang.github.io，即可看到 Github Pages 已經成功地幫我們把 Hugo 的個人網站程式碼轉換成網站。\n每次新增、修改文章時，記得最前面要貼上 Hugo 的文章設定，才能正常顯示。\n添加評論功能 需要依靠其他的第三方網站才能達成，原理是因為 Github Pages 他是屬於靜態網頁，而評論功能是需要後端資料庫儲存，如果只使用 Github Pages 是沒有辦法加入評論功能。\n進入 Hugo 首頁，Search the Docs 輸入 comments，點擊第一個連結，Hugo 預設支持的評論功能網站是 Disqus，所以要先進到 Disqus 這個網站申請一個帳號，在 Disqus 創建一個評論功能之後再回頭修改程式碼，把 Disqus 的帳號跟個人網站連結在一起。\n注意：雖然 Hugo 預設支持的評論功能是 Disqus 網站，但是有的 Hugo 主題可能沒有開啟這個功能，所以要先檢查主題有沒有辦法加入評論功能。\n在 config.yaml 設定檔裡面有找到 disqusShortname 的設定的話，就表示你使用的 Hugo 主題是支持 Disqus 評論功能，把申請的 Disqus 評論功能帳號填在這裡即可。\nDisqus 評論功能 註冊 Disqus 後，點選 Add Disqus To Site 後，頁面拉到最下面點擊 GET STARTED 按鈕。\n選擇下面 I want to install Disqus on my site\n註冊網站 選取最下面 Basic 免費方案，點擊 Subscribe Now 按鈕。\n因為 Hugo 平台沒有在選項裡面，所以選取最下面的 Universal Code\n拉到最下面點擊 Configure 按鈕\n設定 Disqus Website URL： 打上 Github Pages 幫我們架設的個人網站的網址\nAppearance： 可以選擇在個人網站上面呈現的評論系統要是什麼顏色，如果是 Auto 就會自動偵測你網站的顏色選擇適合的主題。\nComment and Moderation Settings 評論和審核設置 依喜好選擇，點擊 Complete Setup 按鈕後，最後再點擊 Dismiss Setup。\nconfig.yaml 設定 disqusShortname 改成剛剛在 Disqus 上面申請的 Website Name 的值。不知道的可以點擊右上角 Edit Settings，回去看 Shortname。\n將 Shortname 貼到 config.yaml 設定檔後存檔\n執行 hugo server，隨選一篇文章，拉到最下面。看到此段表示你的 Disqus 設定已經設定好。Disqus 評論功能只有在你將設定上傳到 Github 之後才會生效。\n回到終端機，按 Ctrl+C 停止 hugo server 運行，輸入 hugo 產生個人網站的程式碼。\n將 exampleSite \u0026gt; public 資料夾裡全部內容複製到 reiohuang.github.io 資料夾中，勾選全部套用並取代。\n提交 commit(add disqus) 並 push 到 Github\nUtterances 評論功能 捨棄 Disqus 的理由：如何在hugo上安裝utterances?\n把個人網站的評論跟 Github issues 討論區的功能結合在一起，別人只要來個人網站上留下評論，實際上就是在 Github repository 裡面開啟一個 issue，就可以在 issue 裡面看到所有的評論紀錄。如果要在 Hugo 上加入這個 Utterances 的評論功能，需要有 html 程式碼的基礎。\nUtterances 評論產生的 issues 可以選擇你想放的 Repository 中：\nissues 放在個人網站 Repository 安裝 Github App utterances repository 選個人網站的 repository 修改 config.yaml 如下圖紅框處 登入 Github 帳號後即可留言 留言會上傳到個人網站的 issue 區，別人只要來我的個人網站評論，就是在我的 Github repository 裡面開啟一個 issue。\nissues 放在新創的 Repository Create a new repository 安裝 Github App utterances 選擇剛剛新創建的 Github repo reiohuang/comment-utterances。 修改 config.yaml 如下圖紅框處 登入 Github 帳號後即可留言 留言測試 留言會上傳到個人網站的 issue 區 添加 Google Analytics 進到 Google Analytics (分析)網站，點擊開始量測，開始 GA 的設定。\n帳戶名稱可以隨意填，全部都打勾。\n資源名稱填 Github 帳號，報表時區和幣別不用改。\n點擊顯示進階選項，開啟「建立通用 Analytics 分析資源」的開關，在網站網址裡面 填上個人網站的網址。\n如下圖點選：\n都打勾\n建議把「成效建議與最新消息」打勾，這樣可以收到每個月 GA 傳來的報表。 成功創建一個資源後，會出現一個評估 ID，先複製下來。回到 VS Code，打開 Hugo 設定檔，找到 Google Analytics 的 ID 設定，貼上剛剛複製的追蹤 ID。 註：從 GA4 開始，使用 G- 開頭的評估 ID，而不是 GA3 以 UA- 開頭的追蹤 ID。\n在 config.yaml 加上\n1 googleAnalytics: \u0026lt;GA4_評估_ID\u0026gt; GA 的 ID 設定好之後，必須把這個改動上傳到 Github 才會生效。\n接著使用 Hugo 產生個人網站的程式碼，終端機輸入 hugo，產生個人網站的程式碼，public 資料夾產生了新的程式碼。把新產生出來的程式碼複製到 GitHub/reiohuang.github.io 資料夾，最後 push 到 GitHub 上，進到自己的個人網站。\n回到 Google Analytics 頁面查看，狀態已被改成「已順利啟用資料收集功能」，表示個人網站已經成功跟 GA 連結，這樣以後就可以使用 GA 來分析個人網站的數據。\n主題無 googleAnalytics 設定 若主題裡面找不到 googleAnalytics 的設定，是因為主題本身沒有開啟 GA 設定的關係，所以在設定檔才找不到可以填上 GA ID 的地方。\n解決辦法：自己刻，需要一點 html 的程式碼基礎。 進入 Hugo 首頁，Search the Docs 輸入 google analytics，點擊第一個連結。\n複製這行程式碼\n回到 VS Code，以本主題 Stack 為例，進到 themes 去更改主題裡面的設定，路徑：themes \u0026gt; hugo-theme-stack \u0026gt; layouts \u0026gt; partials \u0026gt; head \u0026gt; head.html，把剛剛複製的程式碼貼到裡面。\n再回到 Hugo 的官方網站，選擇 yaml 格式，複製這行程式碼，貼到 config.yaml 設定檔。\nconfig.yaml 設定檔， 填上你的評估 ID(G-MEASUREMENT_ID)。\n這樣就能讓沒有 googleAnalytics 設定的主題也支持 GA 設定，只要把自己的評估 ID 填在 G-MEASUREMENT_ID 即可。\n添加 Google Search Console 可以透過 Google 搜尋找到個人網站，如果想要讓文章可以通過 Google 搜尋被找到，就必須要為你的個人網站加上 Google Search Console 的功能。\n有一個簡單的方法可以驗證自己的個人網站是否已經可以被 Google 查詢到，在 Google 首頁搜尋列中輸入 site:個人網站網址 查詢。\n如果你的 Google 搜尋結果只有出現「請使用 Google Search Console」，就表示別人目前還沒有辦法在 Google 搜尋裡找到你的個人網站。\n新增資源 點擊新增資源\n選擇右邊的這個網址前置字元，輸入個人網站的網址。\n設定 Google Search Console 的功能，點擊左邊的 Sitemap 把我們的個人網站的 Sitemap 加到 Google Search Console 裡面，直接在後面填上 sitemap.xml，點擊提交按鈕。\nGoogle 之後會自己定期的去查看我們的 Sitemap，看看有沒有新的頁面出現，以後新增一篇文章，Google 就會自己發現，不用每次都還要重新上傳新的 Sitemap。\n客製化現有主題 修改程式碼樣式 這個修改的方式跟其他的比較不一樣，需要從 Hugo 的設定檔 config.yaml 去修改，而不是改 css 樣式。 在 Hugo 網頁搜尋列輸入 markup，往下找到 Highlight。\nstyle 就是去設定程式碼的呈現樣式，這邊預設的是使用 monokai。\n回到 Hugo 官方文件，在設定檔的下面有兩個連結，可以看目前 Hugo 支持的程式碼主題樣式有哪一些，可以找出個人網站比較匹配的風格。\n把 style 主題名字替換成 dracula\n參考資料 Stack 官網 Hugo 新手道場 KermsBlog hugo主題stack Hugo：插入Adsense代碼 在 GitHub 部署 Hugo 靜態網站 ","date":"2022-09-15T08:52:34+08:00","image":"https://images.unsplash.com/photo-1521587760476-6c12a4b040da?ixlib=rb-1.2.1\u0026ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8\u0026auto=format\u0026fit=crop\u0026w=2070\u0026q=80","permalink":"https://reiohuang.github.io/2022/09/hugo-stack/","title":"部署 Hugo 靜態網站"},{"content":"所須套件 ▶ My shell setup:\nFish shell: https://fishshell.com/ Fisher: https://github.com/jorgebucaran/fisher Shellder: https://github.com/simnalamburt/shellder Nerd fonts: https://github.com/ryanoasis/nerd-fonts z for fish: https://github.com/jethrokuan/z Exa: https://the.exa.website/ 使用 Homebrew 安裝 Fish shell 開啟 Terminal 安裝套件管理工具 Homebrew\n1 /bin/bash -c \u0026#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\u0026#34; 接著執行以下兩行命令，將 Homebrew 添加到 PATH： 透過 Homebrew 安裝 Fish shell\n1 brew install fish 設定 Fish shell 為預設 shell Add fish to the know shells run the command: sudo sh -c 'echo /opt/homebrew/bin/fish \u0026gt;\u0026gt; /etc/shells' Restart your terminal Set fish as the default shell run the command: chsh -s /opt/homebrew/bin/fish 在 Fish shell 中，錯誤的指令會以紅色顯示，但為什麼 brew 也顯示紅色？ 將 brew 加入 fish 路徑可解決\n1 set -U fish_user_paths /opt/homebrew/bin/ $fish_user_paths 安裝 Fisher 套件管理 Fisher 套件管理\nshell 輸入\n1 curl -sL https://git.io/fisher | source \u0026amp;\u0026amp; fisher install jorgebucaran/fisher 使用 install 命令安裝套件，後接 GitHub 上存儲庫的路徑。\n1 fisher install \u0026lt;GH_ REPOSITORY\u0026gt; 例如安裝套件 Z\n1 fisher install jethrokuan/z 查看已安裝套件 1 fisher list 指令操作 1 2 3 4 fisher install # 安裝套件 fisher remove # 移除套件 fisher list # 查看已安裝套件 fisher update # 更新所有套件 安裝 Oh My Fish oh-my-fish\n1 curl https://raw.githubusercontent.com/oh-my-fish/oh-my-fish/master/bin/install | fish 安裝好 Oh-my-fish 後，可以安裝喜歡的主題。\n安裝 shellder 主題 1 omf install https://github.com/simnalamburt/shellder 查看已安裝主題\n1 omf theme 已安裝的主題有 agnoster 和 shellder\n配置主題\n1 omf theme shellder 移除主題 1 omf remove agnoster 指令操作 1 2 3 4 5 6 7 8 9 10 11 12 13 omf list # 列出所有安裝 omf theme # 查看已安裝和可安裝主題 omf install shellder # 安裝主題(失效時可用網址取代如下) # omf也可以指定url安装package omf install https://github.com/simnalamburt/shellder omf theme shellder # 配置主題 omf remove agnoster # 移除主題 omf search nvm # 搜索主題或套件 omf update omf # 僅更新核心功能 omf update # 更新全部 omf doctor # 報錯處理 omf destroy # 卸載 omf -h # 幫助 安裝 MesloLGS 字型與 Nerd Fonts 字體 當無法正確顯示字型與特殊 Icon 時：\n安裝四個字型 MesloLGS NF Regular.ttf MesloLGS NF Bold.ttf MesloLGS NF Italic.ttf MesloLGS NF Bold Italic.ttf 安裝 Nerd Fonts 1 2 brew tap homebrew/cask-fonts brew install --cask font-hack-nerd-font 字型安裝完成後，Terminal 設定 \u0026gt; 偏好設定 \u0026gt; 描述檔， 更改字體為 Meslo LG S NF 。\n可視化配置 1 fish_config 安裝其它套件 Z (Directory jumper) 套件 z 類似於 autojump ，快速移到到想去的資料夾。\n1 fisher install jethrokuan/z sponge 失敗或是打錯的指令不會記錄到歷史清單中\n1 fisher install andreiborisov/sponge exa 安裝套件 exa\n1 brew install exa 顯示圖標\n1 exa -l -g --icons tree view 1 exa --tree # 看全層 1 exa --tree --level=2 -a # 看下兩層 Config alias 使用 vim 編輯 config.fish 設定檔\n1 vim ~/.config/fish/config.fish 設定別名\n1 2 alias ll \u0026#34;exa -l -g --icons\u0026#34; alias lla \u0026#34;ll -a\u0026#34; 設定完成後要重開 terminal 才會生效\n參考資源 Installing Fish shell on MacOS (Intel and M1) https://mileschou.me/note/linux/fish Ubuntu 安裝 Fish Shell + Oh My Fish + Tide 與各種插件 Fish shell：讓指令更接近懶人使用 My Fish shell workflow for coding 以 fish 做為預設的 shell ","date":"2022-09-10T00:00:00Z","image":"https://images.unsplash.com/photo-1544552866-d3ed42536cfd?ixlib=rb-1.2.1\u0026ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8\u0026auto=format\u0026fit=crop\u0026w=2071\u0026q=80","permalink":"https://reiohuang.github.io/2022/09/fish-shell/","title":"Mac 安裝 Fish Shell"}]